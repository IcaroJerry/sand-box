/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sdfs.client.ui;


import java.awt.Color;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.sdfs.client.controller.ClientController;
import org.sdfs.client.controller.LogController;

/**
 *
 * @author icarojerry
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        ckShowLog.setSelected(LogController.showWindowLog);
        
        try {
            fileManagerScene = new FileManagerScene();
        } catch (IOException ex) {
            LogController.printLog("ERROR", "Ocorreu um erro ao iniciar a view File Manager.");
        }
        tabContainer.add(fileManagerScene);
        tabContainer.setTitleAt(tabContainer.getComponentZOrder(fileManagerScene), "File Manager");
        
        logScene = new LogScene();
        tabContainer.add(logScene);
        tabContainer.setTitleAt(tabContainer.getComponentZOrder(logScene), "Log Area");
        
        chatScene = new ChatScene();
        tabContainer.add(chatScene);
        tabContainer.setTitleAt(tabContainer.getComponentZOrder(chatScene), "Chat");
        
        serverScene = new ServersScene();
        tabContainer.add(serverScene);
        tabContainer.setTitleAt(tabContainer.getComponentZOrder(serverScene), "Available Servers");
        
        javax.swing.JFrame f = new javax.swing.JFrame();
        f.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        
        this.tabContainer.setSize(fileManagerScene.getSize());
        this.setMinimumSize(this.fileManagerScene.getSize());
        this.repaint();
        this.pack();
        this.setLocationByPlatform(true);
        
        fileManagerScene.showRootFile();
        
        refreshAllScenes();
    }
    private void refreshMainWindow() {
        if(!ClientController.getInstance().isConnected2DS()) {
            statusDS.setText("Disconnected :(");
            statusDS.setForeground(Color.red);
        }
        else {
            statusDS.setText("Connected :)");
            statusDS.setForeground(Color.green);
        }
    }
    
    public void refreshAllScenes() {
        refreshMainWindow();
        refreshLogArea();
        refreshChatArea();
        refreshTblListServer();
    }
    
   public void refreshChatArea() {
        if(ClientController.getInstance().getAvailableServers() == null &&
           ClientController.getInstance().getUsersConnected() == null) {
            tabContainer.setEnabledAt(tabContainer.getComponentZOrder(chatScene), false);
            tabContainer.setSelectedIndex(0);
            return;
        }
        tabContainer.setEnabledAt(tabContainer.getComponentZOrder(chatScene), true);
        this.chatScene.refreshScene();
    }

    public void refreshTblListServer() {
        if(ClientController.getInstance().getAvailableServers() == null) {
            tabContainer.setEnabledAt(tabContainer.getComponentZOrder(serverScene), false);
            tabContainer.setSelectedIndex(0);
            return;
        }
        tabContainer.setEnabledAt(tabContainer.getComponentZOrder(serverScene), true);
        this.serverScene.refreshScene();
    }

    
    public void clearTable(DefaultTableModel model, JTable table) {
        int size = model.getRowCount();
        for(int i = 0; i < size; ++i) 
            model.removeRow(0); 
        table.repaint();
    }

    public void printLog(String typeMessage, String message) {
        message = "- " + message;

        if(typeMessage.contains("ERROR")) {
            this.logScene.appendLog(message);
        }
        else if(typeMessage.contains("ALERT")) {
             JOptionPane.showMessageDialog(this, message, "ALERT!",
                                               JOptionPane.WARNING_MESSAGE);
            this.logScene.appendLog(message);
        }
        else {
            this.logScene.appendLog(message);
        }
                
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabContainer = new javax.swing.JTabbedPane();
        lblDS = new javax.swing.JLabel();
        statusDS = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miConnectToDirectoryService = new javax.swing.JMenuItem();
        mConfig = new javax.swing.JMenu();
        ckShowLog = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabContainer.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        lblDS.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblDS.setText("Directory Service:");

        statusDS.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        statusDS.setForeground(java.awt.Color.green);
        statusDS.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        statusDS.setText("Connected");
        statusDS.setToolTipText("");

        jMenu1.setText("Connect");

        miConnectToDirectoryService.setText("Directory Service");
        miConnectToDirectoryService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miConnectToDirectoryServiceActionPerformed(evt);
            }
        });
        jMenu1.add(miConnectToDirectoryService);

        jMenuBar1.add(jMenu1);

        mConfig.setText("Options");

        ckShowLog.setSelected(true);
        ckShowLog.setText("Show Log....");
        ckShowLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckShowLogActionPerformed(evt);
            }
        });
        mConfig.add(ckShowLog);

        jMenu2.setText("Config");

        jMenuItem1.setText("Direcoty Service...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        mConfig.add(jMenu2);

        jMenuBar1.add(mConfig);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabContainer)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(629, 629, 629)
                        .addComponent(lblDS, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(statusDS, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDS)
                    .addComponent(statusDS))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ckShowLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckShowLogActionPerformed
        refreshLogArea();
    }//GEN-LAST:event_ckShowLogActionPerformed

    private void miConnectToDirectoryServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miConnectToDirectoryServiceActionPerformed
        this.setEnabled(false);
        ClientController.getInstance().connectToDirectoryService();
        this.setEnabled(true);
        
        if(this.ckShowLog.isSelected())
            tabContainer.setSelectedComponent(logScene);
    }//GEN-LAST:event_miConnectToDirectoryServiceActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(dsConfig == null) {    
            dsConfig = new DSConfigScene();
        }
            
        JOptionPane.showOptionDialog(
            this,
            dsConfig,
            "Config Directory Service",
            JOptionPane.CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE,
            null, new String[]{"Close"} , null); 
        
        if(this.ckShowLog.isSelected())
            tabContainer.setSelectedComponent(logScene);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private void refreshLogArea() {
        tabContainer.setEnabledAt(tabContainer.getComponentZOrder(logScene),this.ckShowLog.isSelected());
        tabContainer.setSelectedIndex(0);
    }
    
    private FileManagerScene fileManagerScene;
    private LogScene logScene;
    private ChatScene chatScene;
    private ServersScene serverScene;
    private JPanel dsConfig;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem ckShowLog;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel lblDS;
    private javax.swing.JMenu mConfig;
    private javax.swing.JMenuItem miConnectToDirectoryService;
    private javax.swing.JLabel statusDS;
    private javax.swing.JTabbedPane tabContainer;
    // End of variables declaration//GEN-END:variables
}