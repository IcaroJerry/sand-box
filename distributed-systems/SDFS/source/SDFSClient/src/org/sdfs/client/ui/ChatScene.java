/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sdfs.client.ui;

import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.sdfs.client.controller.ClientController;
import org.sdfs.interfaces.model.IUser;
import org.sdfs.interfaces.model.UserTableModel;

/**
 *
 * @author icarojerry
 */
public class ChatScene extends javax.swing.JPanel {

    /**
     * Creates new form ChatScene
     */
    public ChatScene() {
        initComponents();
        
        tblListUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblListUsers.setAutoCreateRowSorter(true);
        tblListUsers.setShowVerticalLines(false);
        
        listSelectionListener = new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                int row = tblListUsers.getSelectionModel().getLeadSelectionIndex();
                //atribuir acao ao ser selecionada uma linha da tabela
            }
        };
        tblListUsers.getSelectionModel().addListSelectionListener(listSelectionListener);
        addFocusLitener(txtMsg);
        
        refreshScene();
    }
    
    public void refreshScene() {
        setTableData();
    }
    private void setTableData() {
        IUser[] users;
        
        if(ClientController.getInstance().getUsersConnected() == null || 
           ClientController.getInstance().getUsersConnected().size() == 0)
            return;
        
        users = new IUser[ClientController.getInstance().getUsersConnected().size()];
        for(int i = 0; i < users.length; ++i) {
            users[i] = ClientController.getInstance().getUsersConnected().get(i);
        }
        
        if (userTableModel == null) {
            userTableModel = new UserTableModel();
            tblListUsers.setModel(userTableModel);
        }
        tblListUsers.getSelectionModel().removeListSelectionListener(listSelectionListener);
        userTableModel.setUsers(users);
        tblListUsers.getSelectionModel().addListSelectionListener(listSelectionListener);
    }
    
    private void addFocusLitener(javax.swing.JTextField tx) {
        String defaultMsg = tx.getText();
        tx.setForeground(java.awt.Color.GRAY);

        tx.addFocusListener(new java.awt.event.FocusListener() {
            @Override
            public void focusGained(java.awt.event.FocusEvent fe) {
                if (tx.getText().equals(defaultMsg)) {
                    tx.setText("");
                    tx.setForeground(java.awt.Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent fe) {
                if (tx.getText().isEmpty()) {
                    tx.setForeground(java.awt.Color.GRAY);
                    tx.setText(defaultMsg);
                    verifySendButton(false);
                    return;
                }
                verifySendButton(true);
            }
        });
    }
    
    private void verifySendButton(boolean enable) {
        this.bntSend.setEnabled(enable);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbUserMsg = new javax.swing.JComboBox<>();
        bntSend = new javax.swing.JButton();
        txtMsg = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnRefresh = new javax.swing.JButton();
        userPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblListUsers = new javax.swing.JTable();

        setEnabled(false);

        cbUserMsg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all" }));

        bntSend.setMnemonic('s');
        bntSend.setText("Send");
        bntSend.setEnabled(false);

        txtMsg.setText("digite aqui sua mensagem...");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        btnRefresh.setMnemonic('r');
        btnRefresh.setText("Refresh");

        userPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Utilizadores On-line"));

        tblListUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblListUsers);

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbUserMsg, 0, 1, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntSend))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbUserMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bntSend))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private UserTableModel userTableModel;
    private  ListSelectionListener listSelectionListener;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntSend;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> cbUserMsg;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable tblListUsers;
    private javax.swing.JTextField txtMsg;
    private javax.swing.JPanel userPanel;
    // End of variables declaration//GEN-END:variables
}
